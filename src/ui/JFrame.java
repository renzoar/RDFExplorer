package ui;

import com.hp.hpl.jena.query.Dataset;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecException;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QueryParseException;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFactory;
import com.hp.hpl.jena.query.ResultSetFormatter;
import com.hp.hpl.jena.query.ResultSetRewindable;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.sparql.core.DatasetImpl;
import com.hp.hpl.jena.sparql.engine.http.QueryExceptionHTTP;
import com.hp.hpl.jena.tdb.TDBFactory;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.riot.RiotException;

import src.CSet;
import src.ExtractorSchemaWorker;
import src.FileQueryExecutor;
import src.QueryExecutor;
import src.SchemaExtractor;
import src.Utilities;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mauricio
 */
public class JFrame extends javax.swing.JFrame {

    private String filename;
    private String prefixes;
    public Dataset dataset;
    
    private String storePath;
    private JNamedGraphsList graphList;
    private int state;
    DefaultListModel listModelNamedGraphs = new DefaultListModel();
    DefaultListModel listModelDefaultGraph = new DefaultListModel();
    DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
    ArrayList<String> generatedPrefixes;
    HashMap<String, String> generatedSchemas;
    
    public String endpointURL;
    public String datasetName;
    
    public JFrame() {
        initComponents();
        Font font = new Font("monospaced", Font.PLAIN, 11);

        super.setLocationRelativeTo(this);
        super.setExtendedState(JFrame.MAXIMIZED_BOTH);
        UIManager.put("OptionPane.yesButtonText", "Yes");
        UIManager.put("OptionPane.okButtonText", "Ok");
        
        this.jTextAreaOutput.setFont(font);
        this.graphList = new JNamedGraphsList();
        this.state = Utilities.IDLE;
        this.jListNamedGraphs.setModel(this.listModelNamedGraphs);
        this.jListDefaultGraph.setModel(this.listModelDefaultGraph);
        this.jComboBoxPrefixes.setModel(modelComboBox);
        this.setEnableButtons(false, false);
        this.generatedPrefixes = new ArrayList<>();
        this.generatedSchemas = new HashMap<>();
        
        this.writeDefaultPrefixes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonExecute = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonAddDefaultGraph = new javax.swing.JButton();
        jButtonAddNamedGraph = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonDiscoverSchema = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaQuery = new javax.swing.JTextArea();
        jComboBoxPrefixes = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSchema = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListNamedGraphs = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListDefaultGraph = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFile = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        newJenaRAM = new javax.swing.JMenuItem();
        newJenaTDB = new javax.swing.JMenuItem();
        endpointConnection = new javax.swing.JMenuItem();
        openJenaTDB = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        systaxisConverter = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RDF Tool");

        jButtonExecute.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jButtonExecute.setText("Execute");
        jButtonExecute.setMargin(new java.awt.Insets(2, 6, 2, 6));
        jButtonExecute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonExecuteMouseClicked(evt);
            }
        });

        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jScrollPane2.setViewportView(jTextAreaOutput);

        jPanel2.setPreferredSize(new java.awt.Dimension(30, 20));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButtonAddDefaultGraph.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jButtonAddDefaultGraph.setText("Add default graph");
        jButtonAddDefaultGraph.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAddDefaultGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDefaultGraphActionPerformed(evt);
            }
        });

        jButtonAddNamedGraph.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jButtonAddNamedGraph.setText("Add named graph");
        jButtonAddNamedGraph.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAddNamedGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNamedGraphActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Default graph");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Query");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setText("Output");

        jButtonDiscoverSchema.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jButtonDiscoverSchema.setText("Discovery Schema");
        jButtonDiscoverSchema.setEnabled(false);
        jButtonDiscoverSchema.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonDiscoverSchema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDiscoverSchemaActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel5.setText("Schema");

        jTextAreaQuery.setColumns(20);
        jTextAreaQuery.setRows(5);
        jScrollPane4.setViewportView(jTextAreaQuery);

        jComboBoxPrefixes.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jComboBoxPrefixes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPrefixes.setMaximumSize(new java.awt.Dimension(100, 32767));

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel6.setText("Prefixes");

        jTextAreaSchema.setColumns(20);
        jTextAreaSchema.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSchema);

        jListNamedGraphs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListNamedGraphsMouseClicked(evt);
            }
        });
        jListNamedGraphs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListNamedGraphsValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jListNamedGraphs);

        jListDefaultGraph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDefaultGraphMouseClicked(evt);
            }
        });
        jListDefaultGraph.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDefaultGraphValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(jListDefaultGraph);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel7.setText("Named graphs");

        jFile.setText("File");

        jMenu1.setText("New");

        newJenaRAM.setText("Jena RAM");
        newJenaRAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJenaRAMActionPerformed(evt);
            }
        });
        jMenu1.add(newJenaRAM);

        newJenaTDB.setText("Jena TDB");
        newJenaTDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJenaTDBActionPerformed(evt);
            }
        });
        jMenu1.add(newJenaTDB);

        endpointConnection.setText("Endpoint connection");
        endpointConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endpointConnectionActionPerformed(evt);
            }
        });
        jMenu1.add(endpointConnection);

        jFile.add(jMenu1);

        openJenaTDB.setText("Open Jena TDB");
        openJenaTDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJenaTDBActionPerformed(evt);
            }
        });
        jFile.add(openJenaTDB);

        jMenuBar1.add(jFile);

        jMenu2.setText("Tools");

        systaxisConverter.setText("Convert file");
        systaxisConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systaxisConverterActionPerformed(evt);
            }
        });
        jMenu2.add(systaxisConverter);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 931, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel4)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButtonAddDefaultGraph)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButtonAddNamedGraph)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButtonDiscoverSchema))
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 309, Short.MAX_VALUE)
                                        .addComponent(jButtonExecute))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxPrefixes, javax.swing.GroupLayout.Alignment.TRAILING, 0, 114, Short.MAX_VALUE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAddDefaultGraph, jButtonAddNamedGraph, jButtonDiscoverSchema, jButtonExecute});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonAddNamedGraph)
                                    .addComponent(jButtonAddDefaultGraph)
                                    .addComponent(jButtonDiscoverSchema)))
                            .addComponent(jButtonExecute))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxPrefixes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonAddDefaultGraph, jButtonAddNamedGraph, jButtonDiscoverSchema, jButtonExecute});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void jButtonExecuteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExecuteMouseClicked
        String prefixesString = this.getPrefixes();
        String queryString = prefixesString + this.jTextAreaQuery.getText();
        
        Query query = null;
        try {
            query = QueryFactory.create(queryString);
        } catch (QueryParseException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (this.state == Utilities.USING_JENA_RAM || this.state == Utilities.USING_JENA_TDB){
            QueryExecution qe = null;
            if (this.state == Utilities.USING_JENA_RAM)
                qe = QueryExecutionFactory.create(query, this.dataset);
            else if (this.state == Utilities.USING_JENA_TDB)
                qe = QueryExecutionFactory.create(query, this.dataset);

            // se ejecuta la consulta
            ResultSet results = null;
            try{
                results = qe.execSelect();   // objeto para iterar. no se puede conocer su tamano.       
            } catch (QueryExecException | RiotException ex){
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (results != null){
                ResultSetRewindable rsrw = ResultSetFactory.copyResults(results);  // para conocer tamano
                int solutions = rsrw.size();

                if (solutions < 1001)
                    display(rsrw, query, qe);        
                else{  // poner resultado en un archivo. Completar.
                    JOptionPane.showMessageDialog(this, "Demasiados resultados para mostrar", "Limite excedido", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        
        else if (this.state == Utilities.USING_ENDPOINT){
            QueryExecution qexec = QueryExecutionFactory.sparqlService(this.endpointURL, query, this.datasetName);
            try {
                ResultSet results = qexec.execSelect();
                display(results, query, qexec);        
            } catch (QueryExceptionHTTP ex){
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jButtonExecuteMouseClicked

    private void systaxisConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systaxisConverterActionPerformed
        JDialogCodificacion dialog = new JDialogCodificacion(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_systaxisConverterActionPerformed

    
    private void openJenaTDB(){
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();       
            this.storePath = file.getAbsolutePath();
            this.setStatus("TDB: " + file.getAbsolutePath());
            
            this.dataset = TDBFactory.createDataset(file.getAbsolutePath());
            assert dataset != null : "dataset null";
     
            ArrayList<String> graphs = Utilities.getNamedGraphsTDB(this.storePath);
            this.listModelNamedGraphs.clear();
            for (String s : graphs) {
                this.listModelNamedGraphs.addElement(s);
            }
        }
        else {
            super.setTitle(Utilities.APP_TITLE);
        }
    }
    
    
    private void endpointConnection(){
        JDialogEndpoint dialog = new JDialogEndpoint(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        // verificar que se haya confirmado el uso de Endpoint
        if (this.endpointURL != null && this.datasetName != null){
//            JFrameResourceExplorer v = new JFrameResourceExplorer();
//            v.prefixes = this.prefixes;
//            v.endpointURL = this.endpointURL;
//            v.setLocationRelativeTo(this);
//            v.setVisible(true);
            this.setStatus("Endpoint: " + this.endpointURL);
            
            ArrayList<String> graphs = Utilities.getNamedGraphsEndpoint(this.endpointURL); //graphList.loadNames();
           
            for (String s : graphs){
                this.listModelNamedGraphs.addElement(s);            
            }
        }
        else {
            super.setTitle(Utilities.APP_TITLE);
        }
    }
    
    private void jButtonAddDefaultGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDefaultGraphActionPerformed
        if (this.state == Utilities.USING_JENA_RAM){
            this.addDefaultGraphRAM();
        }
        else if (this.state == Utilities.USING_JENA_TDB){
            this.addDefaultGradphTDB();
        }
    }//GEN-LAST:event_jButtonAddDefaultGraphActionPerformed

    private void jButtonAddNamedGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNamedGraphActionPerformed
        if (this.state == Utilities.USING_JENA_RAM){
            this.addNamedGraphRAM();
        }
        else if (this.state == Utilities.USING_JENA_TDB){
            this.addNamedGraphTDB();
        }
    }//GEN-LAST:event_jButtonAddNamedGraphActionPerformed

    
    private void addNamedGraphTDB(){
        JDialogStoreRDFNamedGraph dialog = new JDialogStoreRDFNamedGraph(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setFolder(this.storePath);
        dialog.setVisible(true);
        this.reloadModel();

        this.graphList.setPath(this.storePath);
        ArrayList<String> graphs = this.graphList.reload();
        
        this.listModelNamedGraphs.clear();
        for (String s : graphs)
            this.listModelNamedGraphs.addElement(s);
        
        //this.datasetInfo.setText("[" + graphs.size() + " named graphs]");
        
        String userQuery = this.jTextAreaQuery.getText();
        if (!userQuery.contains("graph")){
            this.jTextAreaQuery.setText(this.jTextAreaQuery.getText().replace("where { ?x ?y ?z }", "where { graph ?g { ?x ?y ?z }}"));
        }
    }
    
    
    private void addDefaultGradphTDB(){
        JDialogStoreRDFDefaultGraph dialog = new JDialogStoreRDFDefaultGraph(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setFolder(this.storePath);
        dialog.setVisible(true);
        this.reloadModel();
    }
    
    private void addNamedGraphRAM(){
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("RDF FILES", "rdf", "ttl", "nt", "rj", "n3");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.filename = file.getAbsolutePath();
            
            String userQuery = this.jTextAreaQuery.getText();
            if (!userQuery.contains("graph")){
                this.jTextAreaQuery.setText(this.jTextAreaQuery.getText().replace("where { ?x ?y ?z }", "where { graph ?g { ?x ?y ?z }}"));
            }
            
            this.listModelNamedGraphs.addElement("<file:" + this.filename + ">");
            
            Model aux = RDFDataMgr.loadModel(this.filename);
            String uri = "file://"+file.getAbsolutePath();
            this.dataset.addNamedModel(uri, aux);          
            
            this.jTextAreaOutput.setText("");
            this.jTextAreaOutput.append("File: " + file.getAbsolutePath() + "\n");
            this.jTextAreaOutput.append("Number of triples: " + aux.size() + "\n");
            this.jTextAreaOutput.append("Number of triples inserted: " + (this.dataset.getNamedModel(uri).size()) + "\n");
            
//            this.jButtonDiscoverSchema.setEnabled(true);
            this.jListNamedGraphs.setSelectedIndex(listModelNamedGraphs.size()-1);
            
        }
    }
    
    private void newJenaRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJenaRAMActionPerformed
        // set enviroment
        this.state = Utilities.USING_JENA_RAM;
        this.jTextAreaQuery.setText(Utilities.DEFAULT_SPARQL_QUERY);
        super.setTitle(Utilities.APP_TITLE + " [Jena RAM]");
        this.setEnableButtons(true, true);
        this.listModelNamedGraphs.clear();
        // initialize a dataset with an empty default graph
        this.dataset = new DatasetImpl(ModelFactory.createDefaultModel());
    }//GEN-LAST:event_newJenaRAMActionPerformed

    private void openJenaTDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openJenaTDBActionPerformed
        // set enviroment
        this.state = Utilities.USING_JENA_TDB;
        this.jTextAreaQuery.setText(Utilities.DEFAULT_SPARQL_QUERY);
        super.setTitle(Utilities.APP_TITLE + " [Jena TDB]");
        this.setEnableButtons(true, true);
        
        this.openJenaTDB();
    }//GEN-LAST:event_openJenaTDBActionPerformed

    private void jButtonDiscoverSchemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDiscoverSchemaActionPerformed
        if (this.state == Utilities.USING_JENA_RAM){
            if (this.jListNamedGraphs.getSelectedIndex() != -1) {
                String filename = this.jListNamedGraphs.getSelectedValue().toString();

                if (!this.generatedSchemas.containsKey(filename)){ // si el esquema no ha sido previamente generado
                    JDialogExtractSchemaStatus dialog = new JDialogExtractSchemaStatus(this, false);
                    dialog.setLocationRelativeTo(this);
                    dialog.setVisible(true);

                    //QueryExecutor qe = new FileQueryExecutor(file.substring(6, file.length()-1));
                    Model namedModel = this.dataset.getNamedModel("file://"+filename.substring(6, filename.length()-1));
                    QueryExecutor qe = new FileQueryExecutor(namedModel);
                    SchemaExtractor extractor = new SchemaExtractor(qe, (float) 0.5);  // % similitud. limite incluido
                    ExtractorSchemaWorker extractorSchemaWorker = new ExtractorSchemaWorker(dialog, extractor, this);
                    extractorSchemaWorker.execute();                    
                }
                else {
                    String get = this.generatedSchemas.get(filename);
                    this.jTextAreaSchema.setText(this.generatedSchemas.get(filename));
                    this.jTextAreaSchema.setCaretPosition(0);
                }
            }
        }
    }//GEN-LAST:event_jButtonDiscoverSchemaActionPerformed

    private void endpointConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endpointConnectionActionPerformed
        // set enviroment
        this.state = Utilities.USING_ENDPOINT;
        this.jTextAreaQuery.setText(Utilities.DEFAULT_SPARQL_QUERY);
        super.setTitle(Utilities.APP_TITLE + " [Endpoint connection]");
        this.setEnableButtons(true, false);
        this.listModelNamedGraphs.removeAllElements();
        
        this.jTextAreaSchema.setText("");
        this.modelComboBox.removeAllElements();
        this.writeDefaultPrefixes();
        
        this.endpointConnection();
    }//GEN-LAST:event_endpointConnectionActionPerformed

    private void newJenaTDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJenaTDBActionPerformed
        // crear carpeta para nuevo TDB
        JDialogNewJenaTDB dialog = new JDialogNewJenaTDB(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        this.storePath = dialog.getFolder();
        if (this.storePath != null){ // no se llenaron los campos
            this.setStatus("TDB: " + this.storePath);

            this.dataset = TDBFactory.createDataset(this.storePath);
            assert dataset != null : "dataset null";

            ArrayList<String> graphs = Utilities.getNamedGraphsTDB(this.storePath); //graphList.loadNames();

            for (String s : graphs)
                this.listModelNamedGraphs.addElement(s);

            // set enviroment
            this.state = Utilities.USING_JENA_TDB;
            this.jTextAreaQuery.setText(Utilities.DEFAULT_SPARQL_QUERY);
            super.setTitle(Utilities.APP_TITLE + " [Jena TDB]");
            this.setEnableButtons(true, true);
        }
    }//GEN-LAST:event_newJenaTDBActionPerformed

    private void jListNamedGraphsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListNamedGraphsValueChanged

    }//GEN-LAST:event_jListNamedGraphsValueChanged

    private void jListNamedGraphsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListNamedGraphsMouseClicked
        if (evt.getClickCount() == 2 && this.jListNamedGraphs.getSelectedIndex() != -1){
            if (this.state == Utilities.USING_JENA_RAM){
                String file = this.jListNamedGraphs.getSelectedValue().toString();

                if (!this.generatedSchemas.containsKey(file)){ // si el esquema no ha sido previamente generado
                    JDialogExtractSchemaStatus dialog = new JDialogExtractSchemaStatus(this, false);
                    dialog.setLocationRelativeTo(this);
                    dialog.setVisible(true);

                    QueryExecutor qe = new FileQueryExecutor(file.substring(6, file.length()-1));
                    SchemaExtractor extractor = new SchemaExtractor(qe, (float) 0.5);  // % similitud. limite incluido
                    ExtractorSchemaWorker extractorSchemaWorker = new ExtractorSchemaWorker(dialog, extractor, this);
                    extractorSchemaWorker.execute();                    
                }
                else {
                    String get = this.generatedSchemas.get(file);
                    
                    this.jTextAreaSchema.setText(this.generatedSchemas.get(file));
                    this.jTextAreaSchema.setCaretPosition(0);
                }
            }
        }
    }//GEN-LAST:event_jListNamedGraphsMouseClicked

    private void jListDefaultGraphMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDefaultGraphMouseClicked
        this.jListDefaultGraph.clearSelection();
    }//GEN-LAST:event_jListDefaultGraphMouseClicked

    private void jListDefaultGraphValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDefaultGraphValueChanged

    }//GEN-LAST:event_jListDefaultGraphValueChanged

    /**
    * Agregar grafo por defecto en modo ram
    */
    private void addDefaultGraphRAM(){
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("RDF FILES", "rdf", "ttl", "nt", "rj", "n3");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.filename = file.getAbsolutePath();
//            String content = this.jTextAreaQuery.getText();
//            int value = content.indexOf("where");
//            this.jTextAreaQuery.setText(content.substring(0, value) + "from <file:" + filename + ">\n" + content.substring(value, content.length()) );
            
            this.listModelDefaultGraph.addElement("<file:" + this.filename + ">");
            Model aux = RDFDataMgr.loadModel(this.filename);
            long size1 = this.dataset.getDefaultModel().size();  // before load new triples
            this.dataset.getDefaultModel().add(aux);
            
            this.jTextAreaOutput.setText("");
            this.jTextAreaOutput.append("File: " + file.getAbsolutePath() + "\n");
            this.jTextAreaOutput.append("Number of triples: " + aux.size() + "\n");
            this.jTextAreaOutput.append("Number of triples inserted: " + (this.dataset.getDefaultModel().size() - size1) + "\n");
            this.jTextAreaOutput.append("Number of triples in default graph: " + this.dataset.getDefaultModel().size() + "\n");
        }
    }
    
    
    private void reloadModel(){
        assert this.storePath != null : "ruta de almacenamiento no seteada";
        Dataset dataset = TDBFactory.createDataset(this.storePath); // this.jLabelOptionInformation.getText()
        this.dataset = dataset; //TDBFactory.createDataset(this.jLabelOptionInformation.getText());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem endpointConnection;
    private javax.swing.JButton jButtonAddDefaultGraph;
    private javax.swing.JButton jButtonAddNamedGraph;
    private javax.swing.JButton jButtonDiscoverSchema;
    private javax.swing.JButton jButtonExecute;
    private javax.swing.JComboBox jComboBoxPrefixes;
    private javax.swing.JMenu jFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jListDefaultGraph;
    private javax.swing.JList jListNamedGraphs;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTextAreaOutput;
    private javax.swing.JTextArea jTextAreaQuery;
    private javax.swing.JTextArea jTextAreaSchema;
    private javax.swing.JMenuItem newJenaRAM;
    private javax.swing.JMenuItem newJenaTDB;
    private javax.swing.JMenuItem openJenaTDB;
    private javax.swing.JMenuItem systaxisConverter;
    // End of variables declaration//GEN-END:variables

    
    // fixme
    private boolean verifyQueryStructure(String text) {
        if ((text.contains("select") && text.contains("from") && text.contains("where")) || text.contains("ask"))
            return true;
        return false;
    }

    private void display(ResultSet results, Query query, QueryExecution qe) {
        try {
            // poner resultados en un archivo auxiliar
            OutputStream output = new FileOutputStream("temp.tmp");
            ResultSetFormatter.out(output, results, query);

            // liberar recursos
            qe.close();
            output.close();

            // leer archivo auxiliar
            InputStream in2 = new FileInputStream(new File("temp.tmp"));
            BufferedReader reader = new BufferedReader(new InputStreamReader(in2));
            String out = "";
            String line;
            while ((line = reader.readLine()) != null) {
                out += line;
                out += '\n';
            }

            reader.close();
            String[] lines = out.split("\n");

            // add lines to JTextArea
            this.jTextAreaOutput.setText("");
            for (int i=0; i<lines.length; i++){
                this.jTextAreaOutput.append("\n" + lines[i]);
            }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void setStatus(String status) {
        this.jLabel1.setText(status);
    }

    
    private void setEnableButtons(boolean execute, boolean listControls){
        this.jButtonExecute.setEnabled(execute);
        this.jButtonAddDefaultGraph.setEnabled(listControls);
        this.jButtonAddNamedGraph.setEnabled(listControls);
        this.jButtonDiscoverSchema.setEnabled(listControls);
    }

    
    public void writeSchema(ArrayList<CSet> schema) {
        this.jTextAreaSchema.setText("");
        for (CSet set : schema){   // analizar cada CS 
            this.generatePrefix(set.getName());
            this.jTextAreaSchema.append(set.getName() + "\n");
            for (String prop : set.getProperties()){
                this.jTextAreaSchema.append("\t" + prop + "\n");
            }
        }
        
        this.jTextAreaSchema.setText(this.reemplaceNamespaces(this.jTextAreaSchema.getText()));
        this.jTextAreaSchema.setCaretPosition(0);
        
        if (this.state == Utilities.USING_JENA_RAM) {
            this.saveSchema(this.jListNamedGraphs.getSelectedValue().toString(), this.jTextAreaSchema.getText());
        }
        
    }

    private String reemplaceNamespaces(String text) {
        HashMap<String, String> namespaces_prefixes = Utilities.getDefaultPrefixes();
        
        // reemplazar por los prefijos por defecto
        Set<String> keySet = namespaces_prefixes.keySet();
        for (String prefix : keySet){
            text = text.replace(prefix, namespaces_prefixes.get(prefix));
        }
        
        // reemplazar por los prefijos generados
        for (int i = 0; i < this.generatedPrefixes.size(); i++) {
            text = text.replace(this.generatedPrefixes.get(i), "ns"+(i+1)+":");
        }
        
        return text;
    }

   
    /**
     * Genera prefijo a partir de un namespace
     * @param namespace 
     */
    private void generatePrefix(String namespace) {
        int lastPosition;
        
        if (namespace.contains("#"))
            lastPosition = namespace.lastIndexOf("#");
        else
            lastPosition = namespace.lastIndexOf("/");

        String url = namespace.substring(0,lastPosition+1);
        if (!this.generatedPrefixes.contains(url) && !Utilities.getDefaultPrefixes().keySet().contains(url) && lastPosition != -1){
            System.out.println(namespace + " --> " + url);
            this.generatedPrefixes.add(url);
            this.modelComboBox.addElement("ns"+(this.generatedPrefixes.size()) + ": " + url);
        }
    }


    private void writeDefaultPrefixes() {
        HashMap<String, String> defaultPrefixes = Utilities.getDefaultPrefixes();
        Set<String> keySet = defaultPrefixes.keySet();
        for (String key : keySet){
            this.modelComboBox.addElement(defaultPrefixes.get(key) + "<"+key+">");
        }
    }

    private String getPrefixes() {
        String prefixes = "";
        
        // prefijos generados
        for (int i = 0; i < this.generatedPrefixes.size(); i++) {
            prefixes += "PREFIX ns"+(i+1)+": <" + this.generatedPrefixes.get(i) + ">\n";
        }
        
        // prefijos por defecto
        HashMap<String, String> defaultPrefixes = Utilities.getDefaultPrefixes();
        Set<String> keySet = defaultPrefixes.keySet();
        for (String key : keySet){
            prefixes += "PREFIX " + defaultPrefixes.get(key) + " <"+key+">\n";
        }
        
        System.out.println("prefixes = " + prefixes);
        return prefixes;
    }
    
    
    public void saveSchema(String graphName, String schema){
        this.generatedSchemas.put(graphName, schema);    // guardar esquema
    }

    
}
